@using ASP.NET_Project.Models
@using PagedList.Mvc;

@model PagedList.IPagedList<ASP.NET_Project.ViewModels.OrderViewModel>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="row">
    <div class="col-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Advanced Search</h4>
                <p class="card-description d-sm-flex">
                    <span class="text-muted text-small my-auto">Search Customer with filter</span>
                    <br class="d-sm-none" />

                    <a href="@Url.Action("Index")" class="btn btn-sm btn-light ml-auto mr-2 mt-2 mt-sm-0" id="clearFilterProduct">
                        Clear filter
                    </a>
                </p>
                @using (Html.BeginForm("Index", "Products", FormMethod.Get,
                    new { role = "search", id = "AdvanceSearchFormProduct" }))
                {
                    <div class="row">
                        <div class="col-sm-6 col-lg-4">
                            <div class="form-group mb-lg-0">
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label for="advancePaymentType">
                                    <span class="text-small">Payment type</span>
                                </label>
                                @Html.DropDownList("advancePaymentType",
                                    EnumHelper.GetSelectList(typeof(Order.PaymentTypeEnum)),
                                    "",
                                    new
                                         {
                                             @class = "form-control  selectpicker form-selectpicker search-option-select",
                                        id = "advancePaymentType"
                                         })
                            </div>
                        </div>
                        <div class="col-sm-6 col-lg-4">
                            <div class="form-group mb-lg-0">
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label for="advancePaymentType">
                                    <span class="text-small">Order status</span>
                                </label>
                                @Html.DropDownList("advanceOrderStatus",
                                    EnumHelper.GetSelectList(typeof(Order.OrderStatusEnum)),
                                    "",
                                    new
                                         {
                                             @class = "form-control  selectpicker form-selectpicker search-option-select",
                                        id = "advanceOrderStatus"
                                         })
                            </div>
                        </div>
                        <div class="col-sm-6 col-lg-4">
                            <div class="form-group mb-lg-0">
                                @* ReSharper disable once Html.IdNotResolved *@
                                <label for="datefilter">
                                    <span class="text-small">Date filter</span>
                                </label>
                                <input type="text" name="datefilter" id="datefilter" value="" class="form-control" />
                            </div>
                        </div>
                        <div class="col-sm-12 mt-3 text-right">
                            <input type="submit" class="btn btn-primary btn-sm" value="Search" id="form-submit-btn" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>


    <div class="col-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body table-responsive">
                <h4 class="card-title">Order</h4>
                <p class="card-description">
                    <span class="text-muted text-small my-auto">Click the ship name to see detail</span>
                </p>
                <table class="table" id="update-customer">
                    <thead class="text-primary">
                        <tr>
                            <th>
                                Ship Name
                            </th>
                            <th class="text-center">
                                Payment Type
                            </th>
                            <th class="text-center">
                                Total Price
                            </th>
                            <th class="text-center">
                                Order Status
                            </th>
                            <th class="text-center d-none d-lg-table-cell">
                                Edit
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {

                            <tr>
                                <td>
                                    <a class="badge w-100 badge-gradient-primary w-100"
                                       href="@Url.Action("Details", "Orders", new {id = item.Id})">
                                        @Html.DisplayFor(modelItem => item.ShipName)
                                    </a>
                                </td>
                                <td class="text-info text-center">
                                    @item.PaymentTypeId
                                </td>
                                <td class="text-info text-center">
                                    @item.TotalPrice
                                </td>
                                <td class="text-info text-center">
                                    @item.OrderStatus
                                </td>
                                <td class="text-center d-none d-lg-table-cell">
                                    <a class="badge badge-warning" href="@Url.Action("Edit", "Orders", new {id = item.Id})">
                                        <span class="mdi mdi-pencil-box-outline"></span>
                                    </a>
                                </td>
                            </tr>
                            @*<a class="btn btn-link" href="@Url.Action("Edit", "Customers", new {id = item.Id})">
                                    <span class="mdi mdi-pencil-box-outline"></span>
                                </a>
                                <a class="btn btn-link" href="@Url.Action("Details", "Customers", new {id = item.Id})">
                                    <span class="mdi mdi-file-document"></span>
                                </a>
                                <a class="btn btn-link" href="@Url.Action("Delete", "Customers", new {id = item.Id})">
                                    <span class="mdi mdi-trash-can-outline"></span>
                                </a>*@
                        }
                    </tbody>
                </table>
            </div>
            <div class="card-footer bg-white border-0 mt-1">
                @if (Model.PageCount > 1 && Model.PageNumber <= Model.PageCount)
                {
                    <div class="row">
                        <div class="col mx-auto text-center">
                            Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
                        </div>
                    </div>
                    <div class="row paging-control mt-2">
                        <div class="mx-auto text-center">
                            @Html.PagedListPager(Model, page => Url.Action("Index",
                                new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        $(function () {
            // init start time and end time;
            var startDate = new Date();
            startDate.setFullYear(startDate.getFullYear() - 1);
            var endDate = new Date();

            // check start and end parameter
            const startPara = getParameterFromUrl('start');
            if (startPara != null) {
                startDate = new Date(startPara);
            }
            const endPara = getParameterFromUrl('end');
            if (endPara != null) {
                endDate = new Date(endPara);
            }


            // ReSharper disable once PossiblyUnassignedProperty
            $('input[name="datefilter"]').daterangepicker({
                autoUpdateInput: true,
                startDate: startDate,
                endDate: endDate,
                locale: {
                    cancelLabel: 'Clear'
                }
            });
// ReSharper disable UnusedParameter

            $('input[name="datefilter"]').on('apply.daterangepicker', function (ev, picker) {
                const start = picker.startDate.format('YYYY-MM-DD');
                const end = picker.endDate.format('YYYY-MM-DD');
                window.location.href = window.location.href.split('?')[0] + '?start=' + start + '&end=' + end;
            });

            $('input[name="datefilter"]').on('cancel.daterangepicker', function (ev, picker) {
// ReSharper restore UnusedParameter
                $(this).val("");
            });


            function getParameterFromUrl(parameter) {
                const urlString = window.location.href;
                const url = new URL(urlString);
                return url.searchParams.get(parameter);
            }
        });
    </script>
}